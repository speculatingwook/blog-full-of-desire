{
  "title": "메모리상의 데이터 배치",
  "date": "2023-04-18T00:00:00.000Z",
  "tags": [
    "COMPUTER_SCIENCE",
    "ARCHITECTURE",
    "한권으로_읽는_컴퓨터_구조와_프로그래밍"
  ],
  "draft": false,
  "summary": "전공공부하면서 같이 공부하는 운영체제",
  "body": {
    "raw": "\n## 메모리\n\n메모리에는 명령어만 담는 게 아니라 데이터도 담는다. 이 경우에 데이터는 정적(static) 데이터다. '정적'이라는 말은 프로그램을 작성할 때 얼마나 많은 메모리가 필요한지 알고 있다는 뜻이다. 그리고 프로그램을 실행할 때 스택을 위한 메모리가 필요하다는 사실도 배웠다. 따라서 이런 여러 데이터 영역을 서로 충돌하지 않게 배치할 수 있어야 한다.\n\n<p align=\"center\">\n  <img\n    width=\"454\"\n    alt=\"image\"\n    src=\"https://user-images.githubusercontent.com/105579811/232552898-79eb7dcd-21d1-4501-b038-47dc2969a2e2.png\"\n  />\n</p>\n\n위 그림은 MMU가 없을 때 폰 노이만 구조와 하버드 구조의 전형적인 메모리 배치를 보여준다. 유일한 차이는 하버드 구조에서는 명령어가 별도의 메모리에 존재한다는 점뿐이다.\n\n프로그램이 메모리를 사용하는 방법이 한 가지 더 있다. 대부분의 프로그램은 동적(dynamic) 데이터를 다뤄야 한다. 동적 데이터는 프로그램을 실행하기 전에는 크기를 알 수 없는 데이터를 말한다.\n\n예를 들어, 메시징 시스템은 저장해야 할 메시지 개수나 각 메시지의 크기를 미리 알 수 없다.\n\n<p align=\"center\">\n  <img\n    width=\"237\"\n    alt=\"image\"\n    src=\"https://user-images.githubusercontent.com/105579811/232553592-9cd4d7bd-6fb3-4e1b-8b8e-7f7edbc102f8.png\"\n  />\n</p>\n\n동적 데이터는 주로 정적 데이터가 차지하는 영역의 바로 위 영역에 쌓이며, 이를 힙(heap)이라고 부른다. 더 많은 데이터를 저장해야 할 경우 스택은 아래로 자라나는 반면, 힙은 위로 자라난다. 힙과 스택이 서로 충돌하지 않게 하는 것이 중요하다. 메모리 배치에는 몇 가지 사소한 변형이 있다.\n\n예를 들어, 일부 프로세서는 메모리의 시작 부분이나 끝부분에 인터럽트 벡터를 저장하는 영역이나 온칩 I/O 장치를 제어하기 위한 레지스터를 (메모리 주소를 사용해 접근할 수 있게) 확보해두기도 한다.\n\n마이크로컴퓨터에서는 MMU가 없는 경우가 많기 때문에 이런 메모리 배치를 자주 볼 수 있다. MMU가 쓰이는 경우에는 명령, 데이터, 스택이 각기 다른 물리적 메모리 페이지에 매핑되고, 필요에 따라 할당된 크기를 변경할 수 있다. 하지만 프로그램이 바라보는 메모리(가상 메모리)는 여전히 앞에서 설명한 것과 같은 메모리 배치를 사용한다.\n",
    "code": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),_=(n,e)=>{for(var c in e)i(n,c,{get:e[c],enumerable:!0})},s=(n,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!u.call(n,a)&&a!==c&&i(n,a,{get:()=>e[a],enumerable:!(r=p(e,a))||r.enumerable});return n};var f=(n,e,c)=>(c=n!=null?l(g(n)):{},s(e||!n||!n.__esModule?i(c,\"default\",{value:n,enumerable:!0}):c,n)),x=n=>s(i({},\"__esModule\",{value:!0}),n);var h=b((I,d)=>{d.exports=_jsx_runtime});var E={};_(E,{default:()=>C,frontmatter:()=>M});var t=f(h()),M={title:\"\\uBA54\\uBAA8\\uB9AC\\uC0C1\\uC758 \\uB370\\uC774\\uD130 \\uBC30\\uCE58\",date:\"2023-04-18\",tags:[\"COMPUTER_SCIENCE\",\"ARCHITECTURE\",\"\\uD55C\\uAD8C\\uC73C\\uB85C_\\uC77D\\uB294_\\uCEF4\\uD4E8\\uD130_\\uAD6C\\uC870\\uC640_\\uD504\\uB85C\\uADF8\\uB798\\uBC0D\"],draft:!1,summary:\"\\uC804\\uACF5\\uACF5\\uBD80\\uD558\\uBA74\\uC11C \\uAC19\\uC774 \\uACF5\\uBD80\\uD558\\uB294 \\uC6B4\\uC601\\uCCB4\\uC81C\"};function o(n){let e=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h2,{id:\"\\uBA54\\uBAA8\\uB9AC\",children:[(0,t.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#\\uBA54\\uBAA8\\uB9AC\",tabIndex:\"-1\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"\\uBA54\\uBAA8\\uB9AC\"]}),(0,t.jsx)(e.p,{children:\"\\uBA54\\uBAA8\\uB9AC\\uC5D0\\uB294 \\uBA85\\uB839\\uC5B4\\uB9CC \\uB2F4\\uB294 \\uAC8C \\uC544\\uB2C8\\uB77C \\uB370\\uC774\\uD130\\uB3C4 \\uB2F4\\uB294\\uB2E4. \\uC774 \\uACBD\\uC6B0\\uC5D0 \\uB370\\uC774\\uD130\\uB294 \\uC815\\uC801(static) \\uB370\\uC774\\uD130\\uB2E4. '\\uC815\\uC801'\\uC774\\uB77C\\uB294 \\uB9D0\\uC740 \\uD504\\uB85C\\uADF8\\uB7A8\\uC744 \\uC791\\uC131\\uD560 \\uB54C \\uC5BC\\uB9C8\\uB098 \\uB9CE\\uC740 \\uBA54\\uBAA8\\uB9AC\\uAC00 \\uD544\\uC694\\uD55C\\uC9C0 \\uC54C\\uACE0 \\uC788\\uB2E4\\uB294 \\uB73B\\uC774\\uB2E4. \\uADF8\\uB9AC\\uACE0 \\uD504\\uB85C\\uADF8\\uB7A8\\uC744 \\uC2E4\\uD589\\uD560 \\uB54C \\uC2A4\\uD0DD\\uC744 \\uC704\\uD55C \\uBA54\\uBAA8\\uB9AC\\uAC00 \\uD544\\uC694\\uD558\\uB2E4\\uB294 \\uC0AC\\uC2E4\\uB3C4 \\uBC30\\uC6E0\\uB2E4. \\uB530\\uB77C\\uC11C \\uC774\\uB7F0 \\uC5EC\\uB7EC \\uB370\\uC774\\uD130 \\uC601\\uC5ED\\uC744 \\uC11C\\uB85C \\uCDA9\\uB3CC\\uD558\\uC9C0 \\uC54A\\uAC8C \\uBC30\\uCE58\\uD560 \\uC218 \\uC788\\uC5B4\\uC57C \\uD55C\\uB2E4.\"}),(0,t.jsx)(\"p\",{align:\"center\",children:(0,t.jsx)(\"img\",{width:\"454\",alt:\"image\",src:\"https://user-images.githubusercontent.com/105579811/232552898-79eb7dcd-21d1-4501-b038-47dc2969a2e2.png\"})}),(0,t.jsx)(e.p,{children:\"\\uC704 \\uADF8\\uB9BC\\uC740 MMU\\uAC00 \\uC5C6\\uC744 \\uB54C \\uD3F0 \\uB178\\uC774\\uB9CC \\uAD6C\\uC870\\uC640 \\uD558\\uBC84\\uB4DC \\uAD6C\\uC870\\uC758 \\uC804\\uD615\\uC801\\uC778 \\uBA54\\uBAA8\\uB9AC \\uBC30\\uCE58\\uB97C \\uBCF4\\uC5EC\\uC900\\uB2E4. \\uC720\\uC77C\\uD55C \\uCC28\\uC774\\uB294 \\uD558\\uBC84\\uB4DC \\uAD6C\\uC870\\uC5D0\\uC11C\\uB294 \\uBA85\\uB839\\uC5B4\\uAC00 \\uBCC4\\uB3C4\\uC758 \\uBA54\\uBAA8\\uB9AC\\uC5D0 \\uC874\\uC7AC\\uD55C\\uB2E4\\uB294 \\uC810\\uBFD0\\uC774\\uB2E4.\"}),(0,t.jsx)(e.p,{children:\"\\uD504\\uB85C\\uADF8\\uB7A8\\uC774 \\uBA54\\uBAA8\\uB9AC\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uBC29\\uBC95\\uC774 \\uD55C \\uAC00\\uC9C0 \\uB354 \\uC788\\uB2E4. \\uB300\\uBD80\\uBD84\\uC758 \\uD504\\uB85C\\uADF8\\uB7A8\\uC740 \\uB3D9\\uC801(dynamic) \\uB370\\uC774\\uD130\\uB97C \\uB2E4\\uB904\\uC57C \\uD55C\\uB2E4. \\uB3D9\\uC801 \\uB370\\uC774\\uD130\\uB294 \\uD504\\uB85C\\uADF8\\uB7A8\\uC744 \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0\\uB294 \\uD06C\\uAE30\\uB97C \\uC54C \\uC218 \\uC5C6\\uB294 \\uB370\\uC774\\uD130\\uB97C \\uB9D0\\uD55C\\uB2E4.\"}),(0,t.jsx)(e.p,{children:\"\\uC608\\uB97C \\uB4E4\\uC5B4, \\uBA54\\uC2DC\\uC9D5 \\uC2DC\\uC2A4\\uD15C\\uC740 \\uC800\\uC7A5\\uD574\\uC57C \\uD560 \\uBA54\\uC2DC\\uC9C0 \\uAC1C\\uC218\\uB098 \\uAC01 \\uBA54\\uC2DC\\uC9C0\\uC758 \\uD06C\\uAE30\\uB97C \\uBBF8\\uB9AC \\uC54C \\uC218 \\uC5C6\\uB2E4.\"}),(0,t.jsx)(\"p\",{align:\"center\",children:(0,t.jsx)(\"img\",{width:\"237\",alt:\"image\",src:\"https://user-images.githubusercontent.com/105579811/232553592-9cd4d7bd-6fb3-4e1b-8b8e-7f7edbc102f8.png\"})}),(0,t.jsx)(e.p,{children:\"\\uB3D9\\uC801 \\uB370\\uC774\\uD130\\uB294 \\uC8FC\\uB85C \\uC815\\uC801 \\uB370\\uC774\\uD130\\uAC00 \\uCC28\\uC9C0\\uD558\\uB294 \\uC601\\uC5ED\\uC758 \\uBC14\\uB85C \\uC704 \\uC601\\uC5ED\\uC5D0 \\uC313\\uC774\\uBA70, \\uC774\\uB97C \\uD799(heap)\\uC774\\uB77C\\uACE0 \\uBD80\\uB978\\uB2E4. \\uB354 \\uB9CE\\uC740 \\uB370\\uC774\\uD130\\uB97C \\uC800\\uC7A5\\uD574\\uC57C \\uD560 \\uACBD\\uC6B0 \\uC2A4\\uD0DD\\uC740 \\uC544\\uB798\\uB85C \\uC790\\uB77C\\uB098\\uB294 \\uBC18\\uBA74, \\uD799\\uC740 \\uC704\\uB85C \\uC790\\uB77C\\uB09C\\uB2E4. \\uD799\\uACFC \\uC2A4\\uD0DD\\uC774 \\uC11C\\uB85C \\uCDA9\\uB3CC\\uD558\\uC9C0 \\uC54A\\uAC8C \\uD558\\uB294 \\uAC83\\uC774 \\uC911\\uC694\\uD558\\uB2E4. \\uBA54\\uBAA8\\uB9AC \\uBC30\\uCE58\\uC5D0\\uB294 \\uBA87 \\uAC00\\uC9C0 \\uC0AC\\uC18C\\uD55C \\uBCC0\\uD615\\uC774 \\uC788\\uB2E4.\"}),(0,t.jsx)(e.p,{children:\"\\uC608\\uB97C \\uB4E4\\uC5B4, \\uC77C\\uBD80 \\uD504\\uB85C\\uC138\\uC11C\\uB294 \\uBA54\\uBAA8\\uB9AC\\uC758 \\uC2DC\\uC791 \\uBD80\\uBD84\\uC774\\uB098 \\uB05D\\uBD80\\uBD84\\uC5D0 \\uC778\\uD130\\uB7FD\\uD2B8 \\uBCA1\\uD130\\uB97C \\uC800\\uC7A5\\uD558\\uB294 \\uC601\\uC5ED\\uC774\\uB098 \\uC628\\uCE69 I/O \\uC7A5\\uCE58\\uB97C \\uC81C\\uC5B4\\uD558\\uAE30 \\uC704\\uD55C \\uB808\\uC9C0\\uC2A4\\uD130\\uB97C (\\uBA54\\uBAA8\\uB9AC \\uC8FC\\uC18C\\uB97C \\uC0AC\\uC6A9\\uD574 \\uC811\\uADFC\\uD560 \\uC218 \\uC788\\uAC8C) \\uD655\\uBCF4\\uD574\\uB450\\uAE30\\uB3C4 \\uD55C\\uB2E4.\"}),(0,t.jsx)(e.p,{children:\"\\uB9C8\\uC774\\uD06C\\uB85C\\uCEF4\\uD4E8\\uD130\\uC5D0\\uC11C\\uB294 MMU\\uAC00 \\uC5C6\\uB294 \\uACBD\\uC6B0\\uAC00 \\uB9CE\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC774\\uB7F0 \\uBA54\\uBAA8\\uB9AC \\uBC30\\uCE58\\uB97C \\uC790\\uC8FC \\uBCFC \\uC218 \\uC788\\uB2E4. MMU\\uAC00 \\uC4F0\\uC774\\uB294 \\uACBD\\uC6B0\\uC5D0\\uB294 \\uBA85\\uB839, \\uB370\\uC774\\uD130, \\uC2A4\\uD0DD\\uC774 \\uAC01\\uAE30 \\uB2E4\\uB978 \\uBB3C\\uB9AC\\uC801 \\uBA54\\uBAA8\\uB9AC \\uD398\\uC774\\uC9C0\\uC5D0 \\uB9E4\\uD551\\uB418\\uACE0, \\uD544\\uC694\\uC5D0 \\uB530\\uB77C \\uD560\\uB2F9\\uB41C \\uD06C\\uAE30\\uB97C \\uBCC0\\uACBD\\uD560 \\uC218 \\uC788\\uB2E4. \\uD558\\uC9C0\\uB9CC \\uD504\\uB85C\\uADF8\\uB7A8\\uC774 \\uBC14\\uB77C\\uBCF4\\uB294 \\uBA54\\uBAA8\\uB9AC(\\uAC00\\uC0C1 \\uBA54\\uBAA8\\uB9AC)\\uB294 \\uC5EC\\uC804\\uD788 \\uC55E\\uC5D0\\uC11C \\uC124\\uBA85\\uD55C \\uAC83\\uACFC \\uAC19\\uC740 \\uBA54\\uBAA8\\uB9AC \\uBC30\\uCE58\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(o,n)})):o(n)}var C=j;return x(E);})();\n;return Component;"
  },
  "_id": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치.mdx",
  "_raw": {
    "sourceFilePath": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치.mdx",
    "sourceFileName": "메모리상의_데이터_배치.mdx",
    "sourceFileDir": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제",
    "contentType": "mdx",
    "flattenedPath": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치"
  },
  "type": "Blog",
  "readingTime": {
    "text": "4 min read",
    "minutes": 3.31,
    "time": 198600,
    "words": 662
  },
  "slug": "book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치",
  "path": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치",
  "filePath": "blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치.mdx",
  "toc": [
    {
      "value": "메모리",
      "url": "#메모리",
      "depth": 2
    }
  ],
  "structuredData": {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "메모리상의 데이터 배치",
    "datePublished": "2023-04-18T00:00:00.000Z",
    "dateModified": "2023-04-18T00:00:00.000Z",
    "description": "전공공부하면서 같이 공부하는 운영체제",
    "image": "/static/images/rose.png",
    "url": "https://blog-full-of-desire.vercel.app//blog/book/한권으로_읽는_컴퓨터_구조와_프로그래밍/컴퓨터_아키텍쳐와_운영체제/메모리상의_데이터_배치"
  }
}